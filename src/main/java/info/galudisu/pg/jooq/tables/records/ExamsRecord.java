/*
 * This file is generated by jOOQ.
 */
package info.galudisu.pg.jooq.tables.records;


import info.galudisu.pg.jooq.tables.Exams;

import org.jooq.Field;
import org.jooq.Record2;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ExamsRecord extends UpdatableRecordImpl<ExamsRecord> implements Record3<Integer, String, Integer> {

    private static final long serialVersionUID = 583843519;

    /**
     * Setter for <code>public.exams.s_id</code>.
     */
    public void setSId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.exams.s_id</code>.
     */
    public Integer getSId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>public.exams.c_no</code>.
     */
    public void setCNo(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.exams.c_no</code>.
     */
    public String getCNo() {
        return (String) get(1);
    }

    /**
     * Setter for <code>public.exams.score</code>.
     */
    public void setScore(Integer value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.exams.score</code>.
     */
    public Integer getScore() {
        return (Integer) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record2<Integer, String> key() {
        return (Record2) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, String, Integer> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<Integer, String, Integer> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return Exams.EXAMS.S_ID;
    }

    @Override
    public Field<String> field2() {
        return Exams.EXAMS.C_NO;
    }

    @Override
    public Field<Integer> field3() {
        return Exams.EXAMS.SCORE;
    }

    @Override
    public Integer component1() {
        return getSId();
    }

    @Override
    public String component2() {
        return getCNo();
    }

    @Override
    public Integer component3() {
        return getScore();
    }

    @Override
    public Integer value1() {
        return getSId();
    }

    @Override
    public String value2() {
        return getCNo();
    }

    @Override
    public Integer value3() {
        return getScore();
    }

    @Override
    public ExamsRecord value1(Integer value) {
        setSId(value);
        return this;
    }

    @Override
    public ExamsRecord value2(String value) {
        setCNo(value);
        return this;
    }

    @Override
    public ExamsRecord value3(Integer value) {
        setScore(value);
        return this;
    }

    @Override
    public ExamsRecord values(Integer value1, String value2, Integer value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ExamsRecord
     */
    public ExamsRecord() {
        super(Exams.EXAMS);
    }

    /**
     * Create a detached, initialised ExamsRecord
     */
    public ExamsRecord(Integer sId, String cNo, Integer score) {
        super(Exams.EXAMS);

        set(0, sId);
        set(1, cNo);
        set(2, score);
    }
}
