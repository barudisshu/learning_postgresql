/*
 * This file is generated by jOOQ.
 */
package info.galudisu.pg.jooq.tables;


import info.galudisu.pg.jooq.Keys;
import info.galudisu.pg.jooq.Public;
import info.galudisu.pg.jooq.tables.records.CoursesRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Courses extends TableImpl<CoursesRecord> {

    private static final long serialVersionUID = 395562662;

    /**
     * The reference instance of <code>public.courses</code>
     */
    public static final Courses COURSES = new Courses();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CoursesRecord> getRecordType() {
        return CoursesRecord.class;
    }

    /**
     * The column <code>public.courses.c_no</code>.
     */
    public final TableField<CoursesRecord, String> C_NO = createField(DSL.name("c_no"), org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.courses.title</code>.
     */
    public final TableField<CoursesRecord, String> TITLE = createField(DSL.name("title"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.courses.hours</code>.
     */
    public final TableField<CoursesRecord, Integer> HOURS = createField(DSL.name("hours"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * Create a <code>public.courses</code> table reference
     */
    public Courses() {
        this(DSL.name("courses"), null);
    }

    /**
     * Create an aliased <code>public.courses</code> table reference
     */
    public Courses(String alias) {
        this(DSL.name(alias), COURSES);
    }

    /**
     * Create an aliased <code>public.courses</code> table reference
     */
    public Courses(Name alias) {
        this(alias, COURSES);
    }

    private Courses(Name alias, Table<CoursesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Courses(Name alias, Table<CoursesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Courses(Table<O> child, ForeignKey<O, CoursesRecord> key) {
        super(child, key, COURSES);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<CoursesRecord> getPrimaryKey() {
        return Keys.COURSES_PKEY;
    }

    @Override
    public List<UniqueKey<CoursesRecord>> getKeys() {
        return Arrays.<UniqueKey<CoursesRecord>>asList(Keys.COURSES_PKEY);
    }

    @Override
    public Courses as(String alias) {
        return new Courses(DSL.name(alias), this);
    }

    @Override
    public Courses as(Name alias) {
        return new Courses(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Courses rename(String name) {
        return new Courses(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Courses rename(Name name) {
        return new Courses(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<String, String, Integer> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
